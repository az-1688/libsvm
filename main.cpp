#include "algorithm.h"
#include <time.h>
#include <iostream>
#include <windows.h>


using namespace std;


/********************************************************
 ********************************************************

			   算法库用例
1.建模
  1-1. 获取建模数据，背景数据
  1-2. 将建模数据根据光谱类型进行数据处理（ 有多少个类别就调用多少次 xxxTrainHandl 进行处理）
	   参数 ---- 训练数据二维数组：  采集的建模数据二维数组
				一维数组长度：      该建模数组的样品类别
				背景数据：         荧光背景为黑暗环境下的测量数据，吸收光背景为白纸的测量数据
				有效数据起始位:     256个数据中有效范围的起始位下标
				有效数据结束位:     256个数据中有效范围的结束位下标（有效范围一般默认0~255）
				训练样本集：       建模数组通过数据处理之后整合的数据集
				标签：            用于区分样品类别，一般为数字1,2,3...（测量结果返回的也是该标签）
				样本类别集：       整合标签数据的数据集
  1-3. 训练并保存模型

2.判别
  2-1. 将测量数据根据光谱类型进行数据处理（调用 xxxTestHandl）
	   参数 ---- 测量数据：      测量时采集的数据
				背景数据：      选中模型的背景数据
				有效数据起始位： 与鉴别模型的有效数据范围一致
				有效数据结束位： 与鉴别模型的有效数据范围一致
				测量数据集：    测量数据通过数据处理之后整合的数据集
  2-2. 导入模型，进行测量，返回判别的样品标签
  2-3. 相似度判别，取一条判别标签的数据出来，与测量数据进行相似度判别
	   相似度大于95%则判别正确

********************************************************
*********************************************************/


int main()
{

	libsvm alg;
	vector<vector<double>>	train_X;		//训练样本集
	vector<double>	train_Y;				//样本类别集
	vector<double>	test_X;					//测试集


	// 建模数据
	int train1[3][256] = {
		{ 7332,7152,7336,7284,7300,7296,7260,7280,7320,7280,7328,7292,7312,7280,7276,7272,7260,7236,7236,7268,7332,7284,7284,7416,7260,7300,7132,7280,7248,7288,7280,7268,7272,7280,7268,7304,7276,7308,7288,7312,7324,7372,7392,7464,7692,7956,8256,8720,9576,10352,11776,13444,16048,19460,28732,29368,29644,29852,30016,30000,29980,30096,30048,30124,29984,29844,29816,29588,29252,29020,26492,20536,18096,16488,15168,14648,14196,14324,14580,15144,16060,17444,19192,21340,24344,28540,28992,29324,29420,29476,29680,29652,29724,29672,29736,29676,29832,29756,29860,29740,29776,29632,29844,29764,29692,29836,29788,29668,29804,29724,29680,29744,29688,29640,29796,29704,29656,29664,29544,29652,29680,29732,29684,29884,29652,29628,29752,29664,29624,29672,29692,29668,29636,29708,29584,29576,29644,29620,29628,29652,29572,29620,29552,29388,29576,29424,29464,29440,29508,29172,29184,28948,28644,28004,26900,26088,25484,24796,24140,23444,22688,21696,20860,19860,19032,18352,17624,16976,16496,16236,15868,15600,15188,14876,14252,13808,13328,13040,12676,12424,12244,12088,11796,11700,11440,11248,10984,10764,10492,10388,10236,10076,9916,9732,9736,9556,9436,9268,9272,9000,8888,8792,8768,8636,8644,8556,8512,8416,8416,8308,8268,8224,8156,8052,8020,8032,7940,7872,7764,7868,7808,7812,7764,7840,7676,7664,7616,7628,7600,7580,7532,7544,7464,7516,7488,7492,7476,7492,7440,7440,7500,7400,7380,7268,7384,7344,7320,7356,7416,7336,7332,7312,7368,7320,7336,7308},
		{ 7272,7320,7284,7348,7304,7336,7292,7292,7284,7316,7268,7312,7284,7284,7296,7284,7368,7272,7312,7172,7304,7308,7316,7272,7368,7272,7296,7260,7324,7284,7304,7280,7296,7236,7288,7240,7260,7296,7248,7348,7332,7472,7436,7568,7540,7952,8236,8740,9448,10496,11836,13704,16088,19844,28856,29364,29604,29864,29928,29968,30100,30036,30020,30032,29920,29792,29936,29576,29388,28860,26820,20580,18176,16368,15304,14664,14388,14340,14720,15236,16188,17548,19348,21460,24712,28588,28924,29368,29412,29492,29636,29812,29636,29772,29516,29732,29756,29756,29656,29804,29708,29696,29808,29768,29700,29732,29720,29700,29760,29664,29644,29632,29716,29636,29772,29680,29812,29696,29660,29464,29748,29644,29628,29692,29688,29592,29720,29652,29660,29700,29628,29588,29688,29588,29572,29640,29480,29592,29652,29648,29504,29776,29500,29484,29408,29548,29372,29400,29304,29216,29128,28992,28652,28156,27040,26228,25564,24940,24200,23524,22664,21596,20908,19912,19128,18324,17844,17020,16692,16148,15976,15600,15240,14748,14324,13804,13400,12996,12760,12448,12320,12104,11876,11708,11452,11236,10904,10760,10512,10396,10204,10236,9948,9864,9600,9624,9408,9300,9172,9028,8840,8832,8676,8696,8732,8584,8524,8472,8408,8324,8280,8104,8156,8048,8032,7964,8100,7896,7896,7808,7868,7804,7800,7720,7696,7656,7644,7560,7616,7568,7580,7532,7544,7504,7512,7496,7388,7480,7440,7504,7416,7548,7388,7400,7328,7400,7368,7368,7340,7360,7288,7344,7284,7360,7312,7344},
		{ 7344,7288,7248,7272,7312,7260,7312,7280,7328,7300,7304,7304,7272,7252,7204,7248,7328,7280,7292,7420,7252,7328,7264,7312,7272,7328,7272,7228,7256,7296,7272,7308,7288,7304,7276,7296,7276,7292,7248,7212,7368,7404,7448,7544,7852,7884,8264,8720,9452,10420,11844,13660,16100,19716,28732,29412,29736,29788,29996,30020,29960,30128,30024,29928,29876,29896,29704,29644,29368,29084,26596,20572,18020,16448,15236,14648,14324,14356,14536,15204,16116,17512,19316,21480,24496,28472,29056,29244,29440,29404,29608,29672,29720,29660,29784,29676,29736,29744,29804,29716,29788,29724,29696,29728,29704,29756,29884,29720,29676,29756,29656,29700,29696,29684,29508,29728,29680,29628,29708,29876,29568,29708,29632,29668,29728,29684,29668,29628,29588,29572,29736,29700,29596,29672,29604,29572,29696,29624,29528,29508,29616,29488,29580,29496,29576,29456,29440,29320,29440,29284,29092,28964,28700,28044,27140,26308,25584,25036,24316,23480,22696,21928,20848,19952,19028,18392,17708,17140,16640,16328,15932,15624,15228,14864,14308,13904,13404,13020,12712,12464,12276,12092,11908,11724,11500,11244,11096,10760,10484,10216,10264,10100,9980,9864,9824,9540,9452,9268,9168,9028,8940,8808,8756,8608,8620,8544,8504,8468,8448,8340,8260,8312,8140,8036,7884,8008,7924,7932,7884,7892,7824,7820,7744,7776,7696,7708,7624,7604,7572,7552,7520,7484,7548,7564,7492,7492,7632,7428,7452,7312,7468,7396,7416,7388,7380,7352,7392,7332,7388,7340,7404,7320,7340,7320,7324,7288}
	};

	int train2[3][256] = {
		{ 7368,7308,7404,7348,7344,7344,7460,7324,7360,7216,7360,7344,7324,7328,7376,7316,7320,7328,7364,7348,7336,7352,7352,7320,7288,7364,7248,7368,7316,7368,7344,7476,7356,7356,7216,7364,7344,7464,7332,7428,7424,7484,7600,7752,7972,8312,8832,9560,10664,12216,14616,18280,28740,29380,29660,29900,30316,30128,30228,30164,30332,30236,30320,30236,30188,30156,30128,29972,29996,29856,29568,29508,29140,28492,22932,21240,20636,20844,21364,22528,26452,29088,29164,29540,29420,29620,29696,29744,29712,29896,29896,29864,30008,29980,29888,29980,29928,29864,29960,29936,29872,29760,29932,29856,29892,29904,30064,29840,29868,29668,29784,29756,29704,29780,29768,29684,29760,29744,29656,29588,29652,29640,29668,29680,29636,29680,29480,29556,29612,29548,29540,29808,29456,29488,29428,29472,29324,29400,29268,29180,29056,28960,28660,28468,28000,27288,26496,25352,24188,23100,22036,20992,20420,19732,19188,18860,18612,17988,17696,17224,16712,16180,15540,14860,14348,13756,13252,12964,12684,12472,12296,12100,11880,11712,11312,11060,10664,10580,10372,10252,10176,10240,10008,9936,9836,9752,9608,9424,9316,9232,9152,9052,9064,8992,8968,8820,8748,8644,8600,8440,8388,8220,8300,8232,8208,8196,8292,8100,8084,8052,8044,7964,7920,7856,7828,7772,7740,7772,7764,7784,7696,7704,7644,7688,7600,7592,7456,7568,7524,7500,7492,7624,7448,7472,7464,7492,7464,7444,7416,7420,7404,7340,7416,7364,7400,7352,7364,7332,7428,7336,7316,7208,7352,7340,7308,7312},
		{ 7384,7364,7500,7336,7344,7288,7372,7380,7348,7380,7352,7324,7296,7384,7368,7392,7324,7360,7360,7340,7352,7348,7288,7348,7376,7344,7360,7480,7304,7340,7312,7384,7380,7344,7360,7360,7316,7344,7384,7440,7472,7500,7596,7740,7972,8312,8852,9488,10748,12332,14620,18512,28948,29244,29752,29852,30032,30168,30216,30216,30296,30268,30240,30288,30196,30104,30112,29992,29848,29808,29584,29400,29048,28568,22896,21260,20736,20940,21416,22612,26436,28904,29228,29368,29600,29628,29572,29776,29788,29804,29884,29872,29868,29980,29904,29884,29944,29776,29856,29900,29892,29804,30088,29808,29828,29868,29872,29776,29856,29812,29684,29880,29704,29688,29816,29720,29636,29720,29644,29676,29668,29644,29444,29692,29592,29556,29628,29708,29488,29580,29548,29500,29516,29448,29392,29468,29288,29280,29336,29248,28992,28900,28608,28252,27972,27228,26304,25180,24152,22984,21980,21040,20368,19664,19156,18716,18420,18028,17604,17200,16664,16020,15448,14840,14256,13752,13252,12880,12648,12552,12240,12092,11756,11620,11376,11048,10776,10628,10360,10220,10188,10120,10052,9948,9828,9724,9556,9400,9288,9212,9140,9072,9056,8960,9036,8808,8736,8496,8580,8484,8380,8328,8332,8200,8216,8200,8180,8164,8104,8044,8000,7928,7880,7884,7784,7808,7788,7724,7748,7888,7688,7680,7544,7656,7620,7584,7556,7568,7496,7480,7492,7500,7532,7464,7468,7460,7432,7392,7444,7356,7428,7384,7388,7384,7476,7344,7352,7228,7352,7368,7324,7324,7344,7312,7284,7344},
		{ 7392,7360,7372,7364,7372,7364,7360,7356,7288,7384,7368,7352,7340,7496,7316,7364,7316,7388,7388,7336,7360,7360,7324,7316,7376,7376,7340,7348,7336,7372,7372,7368,7364,7268,7380,7380,7352,7376,7516,7372,7464,7516,7632,7800,7984,8320,8852,9556,10676,12360,14692,18564,28828,29340,29592,29972,30092,30100,30168,30296,30204,30328,30264,30356,30216,30184,30032,30108,29872,29724,29640,29444,29024,28656,23004,21220,20772,20816,21384,22656,26668,28812,29284,29308,29516,29564,29664,29660,29948,29784,29864,29920,30004,29884,29804,29928,29904,29920,29924,29892,29948,29888,29828,29928,29820,29944,29920,29828,29648,29868,29712,29684,29764,29860,29640,29764,29708,29696,29688,29732,29576,29668,29556,29568,29708,29608,29636,29576,29568,29460,29696,29536,29444,29376,29468,29348,29400,29324,29304,29204,29080,28836,28732,28288,27820,27260,26356,25104,24248,23028,21912,21140,20268,19664,19208,18912,18356,18016,17496,17176,16708,16088,15484,14916,14276,13700,13336,12948,12656,12404,12284,12108,11880,11664,11348,11024,10784,10548,10388,10240,10292,10104,10032,9796,9880,9752,9572,9444,9352,9208,9108,9108,9084,9028,8944,8832,8760,8604,8540,8504,8324,8356,8312,8244,8220,8352,8156,8136,7992,8096,8032,7956,7924,7872,7824,7768,7792,7800,7772,7732,7716,7712,7660,7664,7636,7520,7584,7560,7540,7520,7672,7472,7508,7356,7512,7480,7448,7428,7456,7432,7412,7416,7412,7420,7360,7368,7400,7336,7376,7368,7272,7360,7352,7384,7332,7508}
	};

	// 背景数据
	int exposeTimeData[256] = { 7364,7228,7364,7332,7352,7388,7336,7252,7380,7324,7332,7384,7284,7372,7324,7316,7324,7348,7264,7316,7300,7316,7348,7440,7312,7332,7196,7332,7308,7308,7352,7328,7300,7352,7328,7296,7332,7332,7376,7380,7380,7472,7576,7636,7936,8324,8880,9760,11140,12780,15436,21660,29152,29648,29908,30044,30288,30304,30396,30496,30444,30452,30384,30416,30316,30300,30320,30148,30020,29972,29784,29736,29460,29232,25976,22452,21740,22016,22640,24872,28840,29276,29452,29696,29776,29844,29896,29948,29952,30044,30036,30036,30056,30044,30036,30164,30204,30072,30316,30080,30096,30028,30184,30120,30160,30132,30072,30108,30092,30028,30080,30020,29984,30076,30016,29940,30020,29948,29820,30024,29916,29908,29884,30116,29848,29992,29848,29900,29948,29884,29804,29908,29792,29868,29852,29836,29776,29832,29764,29712,29708,29664,29660,29552,29644,29544,29588,29524,29612,29408,29332,29092,29068,28824,28216,27284,26408,25524,24856,24048,23068,22208,21220,20244,19404,18564,17852,17284,16668,16348,16048,15632,15264,15008,14296,13864,13336,13040,12692,12432,12240,12024,11776,11660,11420,11152,10944,10672,10468,10292,10128,10024,9932,9700,9648,9512,9348,9236,9232,8904,8836,8696,8628,8576,8552,8512,8448,8384,8340,8272,8184,8100,8064,7996,7944,7936,7884,7844,7752,7788,7768,7748,7720,7816,7608,7632,7544,7588,7516,7500,7520,7468,7448,7480,7452,7420,7424,7392,7404,7384,7376,7344,7360,7244,7320,7316,7336,7316,7448,7276,7308,7284,7316,7276,7268,7312 };
	
	// 测量数据
	int test1[256] = { 7332,7152,7336,7284,7300,7296,7260,7280,7320,7280,7328,7292,7312,7280,7276,7272,7260,7236,7236,7268,7332,7284,7284,7416,7260,7300,7132,7280,7248,7288,7280,7268,7272,7280,7268,7304,7276,7308,7288,7312,7324,7372,7392,7464,7692,7956,8256,8720,9576,10352,11776,13444,16048,19460,28732,29368,29644,29852,30016,30000,29980,30096,30048,30124,29984,29844,29816,29588,29252,29020,26492,20536,18096,16488,15168,14648,14196,14324,14580,15144,16060,17444,19192,21340,24344,28540,28992,29324,29420,29476,29680,29652,29724,29672,29736,29676,29832,29756,29860,29740,29776,29632,29844,29764,29692,29836,29788,29668,29804,29724,29680,29744,29688,29640,29796,29704,29656,29664,29544,29652,29680,29732,29684,29884,29652,29628,29752,29664,29624,29672,29692,29668,29636,29708,29584,29576,29644,29620,29628,29652,29572,29620,29552,29388,29576,29424,29464,29440,29508,29172,29184,28948,28644,28004,26900,26088,25484,24796,24140,23444,22688,21696,20860,19860,19032,18352,17624,16976,16496,16236,15868,15600,15188,14876,14252,13808,13328,13040,12676,12424,12244,12088,11796,11700,11440,11248,10984,10764,10492,10388,10236,10076,9916,9732,9736,9556,9436,9268,9272,9000,8888,8792,8768,8636,8644,8556,8512,8416,8416,8308,8268,8224,8156,8052,8020,8032,7940,7872,7764,7868,7808,7812,7764,7840,7676,7664,7616,7628,7600,7580,7532,7544,7464,7516,7488,7492,7476,7492,7440,7440,7500,7400,7380,7268,7384,7344,7320,7356,7416,7336,7332,7312,7368,7320,7336,7308 };
	
	// 模型名称
	string model_path = ".\\23.txt";


	// 荧光建模数据处理
	alg.fluorescenceTrainHandl(train1, 3, exposeTimeData, 0, 255, train_X, 1, train_Y);			// 训练数据二维数组、一维数组长度、背景数据、有效数据起始位、有效数据结束位、训练样本集、标签、样本类别集
	alg.fluorescenceTrainHandl(train2, 3, exposeTimeData, 0, 255, train_X, 2, train_Y);


	// 吸收光建模数据处理
	//alg.absorbinglightTrainHandl(train1, 3, exposeTimeData, 0, 255, train_X, 1, train_Y);			// 训练数据二维数组、一维数组长度、背景数据、有效数据起始位、有效数据结束位、训练样本集、标签、样本类别集
	//alg.absorbinglightTrainHandl(train2, 3, exposeTimeData, 0, 255, train_X, 2, train_Y);


	//训练,保存模型
	alg.train(train_X, train_Y, model_path);				 //训练样本集、样本类别集、模型名称
	train_X.clear();					
	train_Y.clear();


	// 荧光数据处理
	alg.fluorescenceTestHandl(test1, exposeTimeData, 0, 255, test_X);								// 测量数据，背景数据，有效数据起始位、有效数据结束位、测量数据集

	// 吸收光数据处理
	//alg.absorbinglightTestHandl(test1, exposeTimeData, 0, 255, test_X);
	
	cout << "test1:" << endl ;
	for (int i = 0; i < 256;i++)
	{
		//cout << test_X[i] << " ";
		printf("%.4f  ", test_X[i]);

	}



	//导入模型，预测
	double value = alg.predict(model_path, test_X);

	printf("\r\nlabel: %f\r\n", value);							//打印预测类别
	test_X.clear();

	double ps = alg.pearsonCorrelation(test1, train1[1]);
	if (ps > 0.95)
	{
		printf("predict  true!\r\n");
	}
	else {
		printf("predict  error -- ps: %f\r\n", ps);
	}


	//while (1)
	//{
	//	Sleep(3 * 1000);
	//	cout << "...\r\n";
	//}


}


